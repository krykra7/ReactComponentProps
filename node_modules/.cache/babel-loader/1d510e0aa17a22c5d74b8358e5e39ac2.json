{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/kkrawczyk/Projects/6hxo7u/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGuaranteedMemo = void 0;\n\nvar react_1 = require(\"react\");\n/** Like react's useMemo but with guarantee that the fn\n * won't be invoked again if deps hasn't change */\n\n\nfunction useGuaranteedMemo(fn, deps) {\n  var ref = (0, react_1.useRef)();\n\n  if (!ref.current || deps.length !== ref.current.prevDeps.length || ref.current.prevDeps.map(function (v, i) {\n    return v === deps[i];\n  }).indexOf(false) >= 0) {\n    ref.current = {\n      \"v\": fn(),\n      \"prevDeps\": _toConsumableArray(deps)\n    };\n  }\n\n  return ref.current.v;\n}\n\nexports.useGuaranteedMemo = useGuaranteedMemo;","map":{"version":3,"sources":["/home/kkrawczyk/Projects/6hxo7u/node_modules/tss-react/tools/useGuaranteedMemo.js"],"names":["Object","defineProperty","exports","value","useGuaranteedMemo","react_1","require","fn","deps","ref","useRef","current","length","prevDeps","map","v","i","indexOf"],"mappings":"AAAA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iBAAR,GAA4B,KAAK,CAAjC;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;AACA;AACA;;;AACA,SAASF,iBAAT,CAA2BG,EAA3B,EAA+BC,IAA/B,EAAqC;AACjC,MAAMC,GAAG,GAAG,CAAC,GAAGJ,OAAO,CAACK,MAAZ,GAAZ;;AACA,MAAI,CAACD,GAAG,CAACE,OAAL,IACAH,IAAI,CAACI,MAAL,KAAgBH,GAAG,CAACE,OAAJ,CAAYE,QAAZ,CAAqBD,MADrC,IAEAH,GAAG,CAACE,OAAJ,CAAYE,QAAZ,CAAqBC,GAArB,CAAyB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,KAAKP,IAAI,CAACQ,CAAD,CAApB;AAAA,GAAzB,EAAkDC,OAAlD,CAA0D,KAA1D,KAAoE,CAFxE,EAE2E;AACvER,IAAAA,GAAG,CAACE,OAAJ,GAAc;AACV,WAAKJ,EAAE,EADG;AAEV,qCAAgBC,IAAhB;AAFU,KAAd;AAIH;;AACD,SAAOC,GAAG,CAACE,OAAJ,CAAYI,CAAnB;AACH;;AACDb,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useGuaranteedMemo = void 0;\nconst react_1 = require(\"react\");\n/** Like react's useMemo but with guarantee that the fn\n * won't be invoked again if deps hasn't change */\nfunction useGuaranteedMemo(fn, deps) {\n    const ref = (0, react_1.useRef)();\n    if (!ref.current ||\n        deps.length !== ref.current.prevDeps.length ||\n        ref.current.prevDeps.map((v, i) => v === deps[i]).indexOf(false) >= 0) {\n        ref.current = {\n            \"v\": fn(),\n            \"prevDeps\": [...deps],\n        };\n    }\n    return ref.current.v;\n}\nexports.useGuaranteedMemo = useGuaranteedMemo;\n"]},"metadata":{},"sourceType":"script"}