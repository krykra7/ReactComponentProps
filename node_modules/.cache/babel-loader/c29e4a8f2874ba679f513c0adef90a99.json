{"ast":null,"code":"import _slicedToArray from \"/home/kkrawczyk/Projects/6hxo7u/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/kkrawczyk/Projects/6hxo7u/src/working/InfiniteList.tsx\",\n    _s = $RefreshSig$();\n\nimport { makeStyles } from \"tss-react/mui\";\nimport React, { useCallback, useRef, useState } from \"react\";\nimport { Box, Container } from \"@mui/material\";\nimport ListItem from \"./ListItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles()(function (theme) {\n  return {\n    listContainer: {\n      height: \"100%\"\n    },\n    list: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: theme.spacing(1)\n    }\n  };\n});\nexport default function InfiniteList(props) {\n  _s();\n\n  var _this = this;\n\n  var _useStyles = useStyles(),\n      classes = _useStyles.classes;\n\n  var _useState = useState(1),\n      _useState2 = _slicedToArray(_useState, 2),\n      page = _useState2[0],\n      setPage = _useState2[1];\n\n  var renderItem = props.renderItem,\n      dataLoader = props.dataLoader,\n      patientId = props.patientId;\n\n  var _dataLoader = dataLoader(page, patientId),\n      loading = _dataLoader.loading,\n      error = _dataLoader.error,\n      data = _dataLoader.data,\n      hasMore = _dataLoader.hasMore;\n\n  var lastItemObserver = useRef();\n  var lastItemRef = useCallback(function (node) {\n    if (loading) return;\n    if (lastItemObserver.current) lastItemObserver.current.disconnect();\n    lastItemObserver.current = new IntersectionObserver(function (entries) {\n      if (entries[0].isIntersecting && hasMore) {\n        setPage(function (prevPage) {\n          return prevPage + 1;\n        });\n      }\n    });\n    if (node) lastItemObserver.current.observe(node);\n  }, [loading, hasMore]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: classes.listContainer,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        className: classes.list,\n        children: data.map(function (item, index) {\n          if (data.length === index + 1) {\n            return /*#__PURE__*/_jsxDEV(ListItem, {\n              params: item,\n              ref: lastItemRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 36\n            }, _this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(ListItem, {\n              params: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 36\n            }, _this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: loading && 'Loading...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: error && 'Error'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(InfiniteList, \"I1vTOz9JMwHRiHef8tDZbLUO10w=\", false, function () {\n  return [useStyles];\n});\n\n_c = InfiniteList;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfiniteList\");","map":{"version":3,"sources":["/home/kkrawczyk/Projects/6hxo7u/src/working/InfiniteList.tsx"],"names":["makeStyles","React","useCallback","useRef","useState","Box","Container","ListItem","useStyles","theme","listContainer","height","list","display","flexDirection","gap","spacing","InfiniteList","props","classes","page","setPage","renderItem","dataLoader","patientId","loading","error","data","hasMore","lastItemObserver","lastItemRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPage","observe","map","item","index","length"],"mappings":"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","sourcesContent":["import {makeStyles} from \"tss-react/mui\";\nimport React, {Fragment, LegacyRef, useCallback, useRef, useState} from \"react\";\nimport {Box, Container} from \"@mui/material\";\nimport ListItem from \"./ListItem\";\nimport {Item} from \"../common/Item\";\n\nconst useStyles = makeStyles()((theme) => ({\n    listContainer: {\n        height: \"100%\",\n    },\n    list: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: theme.spacing(1)\n    }\n}));\n\nexport type PaginationCallerOutput<T> = {\n    loading: boolean;\n    error: boolean;\n    data: T[],\n    hasMore: boolean;\n}\n\ntype Props<T> = {\n    patientId: number;\n    renderItem: ({params, ref}: {params: T, ref?: any}) => React.ReactNode;\n    dataLoader: (pageNumber: number, patientId: number) => PaginationCallerOutput<T>\n}\n\nexport default function InfiniteList<T extends object>(props: Props<T>) {\n    const {classes} = useStyles();\n    const [page, setPage] = useState(1);\n    const {renderItem, dataLoader, patientId} = props;\n\n    const {\n        loading,\n        error,\n        data,\n        hasMore\n    } = dataLoader(page, patientId)\n\n    const lastItemObserver = useRef<IntersectionObserver>();\n    const lastItemRef = useCallback((node: HTMLElement) => {\n        if (loading) return;\n        if (lastItemObserver.current) lastItemObserver.current.disconnect();\n        lastItemObserver.current = new IntersectionObserver(entries => {\n            if (entries[0].isIntersecting && hasMore) {\n                setPage(prevPage => prevPage + 1);\n            }\n        })\n        if (node) lastItemObserver.current.observe(node);\n    }, [loading, hasMore])\n\n    return (\n        <>\n            <Container className={classes.listContainer}>\n                <Box className={classes.list}>\n                    {data.map((item, index) => {\n                        if (data.length === index + 1) {\n                            return <ListItem params={item as Item} ref={lastItemRef}/>\n                        } else {\n                            return <ListItem params={item as Item}/>\n                        }\n                    })}\n                </Box>\n                <div>{loading && 'Loading...'}</div>\n                <div>{error && 'Error'}</div>\n            </Container>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}