{"ast":null,"code":"\"use strict\";\n/* eslint-disable @typescript-eslint/ban-types */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMergedClasses = exports.mergeClasses = void 0;\n\nvar objectKeys_1 = require(\"./tools/objectKeys\");\n\nvar cssAndCx_1 = require(\"./cssAndCx\");\n\nvar react_1 = require(\"react\");\n\nfunction mergeClasses(classesFromUseStyles, classesFromProps, cx) {\n  //NOTE: We use !(not) to be resilient for when it is used in withStyle\n  //where classes fromFromProps could diverge from the canonical type...\n  if (!classesFromProps) {\n    return classesFromUseStyles;\n  }\n\n  var out = {};\n  (0, objectKeys_1.objectKeys)(classesFromUseStyles).forEach(function (ruleName) {\n    return out[ruleName] = cx(classesFromUseStyles[ruleName], classesFromProps[ruleName]);\n  });\n  (0, objectKeys_1.objectKeys)(classesFromProps).forEach(function (ruleName) {\n    if (ruleName in classesFromUseStyles) {\n      return;\n    }\n\n    var className = classesFromProps[ruleName]; //...Same here, that why we don't do className === undefined\n\n    if (typeof className !== \"string\") {\n      return;\n    }\n\n    out[ruleName] = className;\n  });\n  return out;\n}\n\nexports.mergeClasses = mergeClasses;\n\nfunction useMergedClasses(classes, classesOv) {\n  var _ref = (0, cssAndCx_1.useCssAndCx)(),\n      cx = _ref.cx;\n\n  return (0, react_1.useMemo)(function () {\n    return mergeClasses(classes, classesOv, cx);\n  }, [classes, classesOv, cx]);\n}\n\nexports.useMergedClasses = useMergedClasses;","map":{"version":3,"sources":["/home/kkrawczyk/Projects/6hxo7u/node_modules/tss-react/mergeClasses.js"],"names":["Object","defineProperty","exports","value","useMergedClasses","mergeClasses","objectKeys_1","require","cssAndCx_1","react_1","classesFromUseStyles","classesFromProps","cx","out","objectKeys","forEach","ruleName","className","classes","classesOv","useCssAndCx","useMemo"],"mappings":"AAAA;AACA;;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2BF,OAAO,CAACG,YAAR,GAAuB,KAAK,CAAvD;;AACA,IAAMC,YAAY,GAAGC,OAAO,CAAC,oBAAD,CAA5B;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,OAAD,CAAvB;;AACA,SAASF,YAAT,CAAsBK,oBAAtB,EAA4CC,gBAA5C,EAA8DC,EAA9D,EAAkE;AAC9D;AACA;AACA,MAAI,CAACD,gBAAL,EAAuB;AACnB,WAAOD,oBAAP;AACH;;AACD,MAAMG,GAAG,GAAG,EAAZ;AACA,GAAC,GAAGP,YAAY,CAACQ,UAAjB,EAA6BJ,oBAA7B,EAAmDK,OAAnD,CAA2D,UAAAC,QAAQ;AAAA,WAAKH,GAAG,CAACG,QAAD,CAAH,GAAgBJ,EAAE,CAACF,oBAAoB,CAACM,QAAD,CAArB,EAAiCL,gBAAgB,CAACK,QAAD,CAAjD,CAAvB;AAAA,GAAnE;AACA,GAAC,GAAGV,YAAY,CAACQ,UAAjB,EAA6BH,gBAA7B,EAA+CI,OAA/C,CAAuD,UAAAC,QAAQ,EAAI;AAC/D,QAAIA,QAAQ,IAAIN,oBAAhB,EAAsC;AAClC;AACH;;AACD,QAAMO,SAAS,GAAGN,gBAAgB,CAACK,QAAD,CAAlC,CAJ+D,CAK/D;;AACA,QAAI,OAAOC,SAAP,KAAqB,QAAzB,EAAmC;AAC/B;AACH;;AACDJ,IAAAA,GAAG,CAACG,QAAD,CAAH,GAAgBC,SAAhB;AACH,GAVD;AAWA,SAAOJ,GAAP;AACH;;AACDX,OAAO,CAACG,YAAR,GAAuBA,YAAvB;;AACA,SAASD,gBAAT,CAA0Bc,OAA1B,EAAmCC,SAAnC,EAA8C;AAC1C,aAAe,CAAC,GAAGX,UAAU,CAACY,WAAf,GAAf;AAAA,MAAQR,EAAR,QAAQA,EAAR;;AACA,SAAO,CAAC,GAAGH,OAAO,CAACY,OAAZ,EAAqB;AAAA,WAAMhB,YAAY,CAACa,OAAD,EAAUC,SAAV,EAAqBP,EAArB,CAAlB;AAAA,GAArB,EAAiE,CAACM,OAAD,EAAUC,SAAV,EAAqBP,EAArB,CAAjE,CAAP;AACH;;AACDV,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useMergedClasses = exports.mergeClasses = void 0;\nconst objectKeys_1 = require(\"./tools/objectKeys\");\nconst cssAndCx_1 = require(\"./cssAndCx\");\nconst react_1 = require(\"react\");\nfunction mergeClasses(classesFromUseStyles, classesFromProps, cx) {\n    //NOTE: We use !(not) to be resilient for when it is used in withStyle\n    //where classes fromFromProps could diverge from the canonical type...\n    if (!classesFromProps) {\n        return classesFromUseStyles;\n    }\n    const out = {};\n    (0, objectKeys_1.objectKeys)(classesFromUseStyles).forEach(ruleName => (out[ruleName] = cx(classesFromUseStyles[ruleName], classesFromProps[ruleName])));\n    (0, objectKeys_1.objectKeys)(classesFromProps).forEach(ruleName => {\n        if (ruleName in classesFromUseStyles) {\n            return;\n        }\n        const className = classesFromProps[ruleName];\n        //...Same here, that why we don't do className === undefined\n        if (typeof className !== \"string\") {\n            return;\n        }\n        out[ruleName] = className;\n    });\n    return out;\n}\nexports.mergeClasses = mergeClasses;\nfunction useMergedClasses(classes, classesOv) {\n    const { cx } = (0, cssAndCx_1.useCssAndCx)();\n    return (0, react_1.useMemo)(() => mergeClasses(classes, classesOv, cx), [classes, classesOv, cx]);\n}\nexports.useMergedClasses = useMergedClasses;\n"]},"metadata":{},"sourceType":"script"}